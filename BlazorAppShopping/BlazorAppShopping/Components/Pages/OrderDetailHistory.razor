@page "/order-details/{orderId:int}"
@using BlazorAppShopping.Entities

@inject NavigationManager Navigation
@attribute [Authorize]
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject CartService CartService
@using BlazorAppShopping.Service

@using System.Diagnostics
@using Microsoft.AspNetCore.Authorization
@using System.Text.Json
@rendermode InteractiveServer
@inject OrderService OrderService
@inject AuthenticationStateProvider AuthenticationStateProvider


@if (orderItems == null)
{
    <p>Loading...</p>
}
else if (!orderItems.Any())
{
    <p>Order item not found for Order ID: @orderId</p>
}
else
{
     <section class="shop_section layout_padding">
    <div class="container">
        <h2 class="text-2xl font-bold text-center text-gray-800">Order Details</h2>
           
        <table class="table">
            <thead>
                <tr>
                    <th>Product Name</th>
                    <th>Quantity</th>
                    <th>Unit Price</th>
                    <th>Total</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in orderItems)
                {
                    <tr>
                        <td>@item.Product.Name</td>
                        <td>@item.Quantity</td>
                        <td>@item.UnitPrice.ToString("C")</td>
                        <td>$@(item.Quantity * item.UnitPrice)</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    </section>
}

@code {
    [Parameter]
    public int orderId { get; set; }

    private List<OrderItem> orderItems;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            orderItems = await OrderService.GetOrderItemsByOrderIdAsync(orderId);
        }
        catch (Exception ex)
        {
            Navigation.NavigateTo("/error");
        }
    }
}
